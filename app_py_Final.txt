import streamlit as st
import torch
from torch import nn
from torchvision import transforms
from PIL import Image
import os

# Step 1: Load the trained model
MODEL_PATH = 'D:/Brain_Tumor_Detection/brain_tumor_model.pth'  # Make sure this is the correct path

# Define your model architecture
class ConvNet(nn.Module):
    def __init__(self, num_classes=4):
        super(ConvNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 12, kernel_size=3, stride=1, padding=1)
        self.bn1 = nn.BatchNorm2d(12)
        self.relu1 = nn.ReLU()
        self.pool = nn.MaxPool2d(kernel_size=2)
        self.conv2 = nn.Conv2d(12, 20, kernel_size=3, stride=1, padding=1)
        self.relu2 = nn.ReLU()
        self.conv3 = nn.Conv2d(20, 32, kernel_size=3, stride=1, padding=1)
        self.bn3 = nn.BatchNorm2d(32)
        self.relu3 = nn.ReLU()
        self.fc = nn.Linear(75 * 75 * 32, num_classes)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu1(x)
        x = self.pool(x)
        x = self.conv2(x)
        x = self.relu2(x)
        x = self.conv3(x)
        x = self.bn3(x)
        x = self.relu3(x)
        x = x.view(-1, 32 * 75 * 75)
        x = self.fc(x)
        return x

# Load the model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = ConvNet(num_classes=4).to(device)

if os.path.exists(MODEL_PATH):
    model.load_state_dict(torch.load(MODEL_PATH, map_location=device))
    model.eval()
else:
    raise FileNotFoundError(f"The model file was not found at {MODEL_PATH}")

# Step 2: Create the login page
def login_page():
    st.title("Brain Tumor Detection")
    st.subheader("Please enter your username and password to log in.")

    # Create login form
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")

    if st.button("Log In"):
        if username == "admin" and password == "admin":  # Update this to secure your app
            st.session_state.logged_in = True  # Set login flag in session state
            st.success("Login successful!")
            return True
        else:
            st.error("Invalid credentials. Please try again.")
            return False
    return False

# Step 3: Create image upload and prediction function
def predict_tumor_type(image):
    # Image preprocessing
    transform = transforms.Compose([
        transforms.Resize((150, 150)),  # Resize the image to match model input
        transforms.ToTensor(),  # Convert image to tensor
        transforms.Normalize([0.5, 0.5, 0.5], [0.5, 0.5, 0.5])  # Normalize the image
    ])
    
    # Preprocess image and pass it through the model
    img = transform(image).unsqueeze(0).to(device)
    with torch.no_grad():  # Disable gradient calculation for inference
        output = model(img)
    
    # Get the prediction
    _, predicted = torch.max(output, 1)  # Get the class with the highest probability
    classes = ['no_tumor', 'glioma_tumor', 'meningioma_tumor', 'pituitary_tumor']  # Class labels
    predicted_class = classes[predicted.item()]
    return predicted_class

# Step 4: Main content after successful login
def main_page():
    st.title("Upload an MRI Image for Tumor Detection")

    # Upload image
    uploaded_image = st.file_uploader("Choose an MRI image", type=['jpg', 'jpeg', 'png'])

    if uploaded_image is not None:
        # Process and show image and prediction
        image = Image.open(uploaded_image)
        st.image(image, caption='Uploaded Image.', use_column_width=True)
        
        # Prediction
        st.text("Classifying the tumor:")
        result = predict_tumor_type(image)  # Get the tumor type prediction
        st.markdown(f"<h3 style='color: blue; font-weight: bold;'>Predicted tumor type: {result}</h3>", unsafe_allow_html=True)

# Step 5: App flow
def app():
    if "logged_in" not in st.session_state:  # Check if the user is logged in
        if login_page():  # Show the main page only after successful login
            main_page()
    else:
        main_page()  # Once logged in, go directly to the main page

if __name__ == "__main__":
    app()
